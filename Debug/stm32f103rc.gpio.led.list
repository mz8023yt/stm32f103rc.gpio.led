
stm32f103rc.gpio.led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080018c4  080018c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f0  080018f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018f0  080018f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f0  080018f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f0  080018f0  000118f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001904  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007785  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000143c  00000000  00000000  000277ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  00028bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  00029508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001519a  00000000  00000000  00029d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067fd  00000000  00000000  0003eefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079800  00000000  00000000  000456f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000beef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024cc  00000000  00000000  000bef74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080018ac 	.word	0x080018ac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080018ac 	.word	0x080018ac

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f8f3 	bl	8000420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f001 fa26 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f001 f9f2 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <HAL_IncTick+0x1c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	461a      	mov	r2, r3
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <HAL_IncTick+0x20>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4413      	add	r3, r2
 8000260:	4a03      	ldr	r2, [pc, #12]	; (8000270 <HAL_IncTick+0x20>)
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000004 	.word	0x20000004
 8000270:	20000028 	.word	0x20000028

08000274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  return uwTick;
 8000278:	4b02      	ldr	r3, [pc, #8]	; (8000284 <HAL_GetTick+0x10>)
 800027a:	681b      	ldr	r3, [r3, #0]
}
 800027c:	4618      	mov	r0, r3
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	20000028 	.word	0x20000028

08000288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000290:	f7ff fff0 	bl	8000274 <HAL_GetTick>
 8000294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002a0:	d005      	beq.n	80002ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <HAL_Delay+0x40>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	461a      	mov	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4413      	add	r3, r2
 80002ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002ae:	bf00      	nop
 80002b0:	f7ff ffe0 	bl	8000274 <HAL_GetTick>
 80002b4:	4602      	mov	r2, r0
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d8f7      	bhi.n	80002b0 <HAL_Delay+0x28>
  {
  }
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000004 	.word	0x20000004

080002cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002e8:	4013      	ands	r3, r2
 80002ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002fe:	4a04      	ldr	r2, [pc, #16]	; (8000310 <__NVIC_SetPriorityGrouping+0x44>)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <__NVIC_GetPriorityGrouping+0x18>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	0a1b      	lsrs	r3, r3, #8
 800031e:	f003 0307 	and.w	r3, r3, #7
}
 8000322:	4618      	mov	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <__NVIC_EnableIRQ+0x34>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	e000e100 	.word	0xe000e100

08000368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	db0a      	blt.n	8000392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	b2da      	uxtb	r2, r3
 8000380:	490c      	ldr	r1, [pc, #48]	; (80003b4 <__NVIC_SetPriority+0x4c>)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	0112      	lsls	r2, r2, #4
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	440b      	add	r3, r1
 800038c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000390:	e00a      	b.n	80003a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4908      	ldr	r1, [pc, #32]	; (80003b8 <__NVIC_SetPriority+0x50>)
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	f003 030f 	and.w	r3, r3, #15
 800039e:	3b04      	subs	r3, #4
 80003a0:	0112      	lsls	r2, r2, #4
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	440b      	add	r3, r1
 80003a6:	761a      	strb	r2, [r3, #24]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000e100 	.word	0xe000e100
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003bc:	b480      	push	{r7}
 80003be:	b089      	sub	sp, #36	; 0x24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	f1c3 0307 	rsb	r3, r3, #7
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	bf28      	it	cs
 80003da:	2304      	movcs	r3, #4
 80003dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	3304      	adds	r3, #4
 80003e2:	2b06      	cmp	r3, #6
 80003e4:	d902      	bls.n	80003ec <NVIC_EncodePriority+0x30>
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	3b03      	subs	r3, #3
 80003ea:	e000      	b.n	80003ee <NVIC_EncodePriority+0x32>
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	f04f 32ff 	mov.w	r2, #4294967295
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	fa02 f303 	lsl.w	r3, r2, r3
 80003fa:	43da      	mvns	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	401a      	ands	r2, r3
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000404:	f04f 31ff 	mov.w	r1, #4294967295
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	fa01 f303 	lsl.w	r3, r1, r3
 800040e:	43d9      	mvns	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000414:	4313      	orrs	r3, r2
         );
}
 8000416:	4618      	mov	r0, r3
 8000418:	3724      	adds	r7, #36	; 0x24
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f7ff ff4f 	bl	80002cc <__NVIC_SetPriorityGrouping>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af00      	add	r7, sp, #0
 800043c:	4603      	mov	r3, r0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000448:	f7ff ff64 	bl	8000314 <__NVIC_GetPriorityGrouping>
 800044c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	68b9      	ldr	r1, [r7, #8]
 8000452:	6978      	ldr	r0, [r7, #20]
 8000454:	f7ff ffb2 	bl	80003bc <NVIC_EncodePriority>
 8000458:	4602      	mov	r2, r0
 800045a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff81 	bl	8000368 <__NVIC_SetPriority>
}
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	4603      	mov	r3, r0
 8000476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff57 	bl	8000330 <__NVIC_EnableIRQ>
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800048c:	b480      	push	{r7}
 800048e:	b08b      	sub	sp, #44	; 0x2c
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000496:	2300      	movs	r3, #0
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800049e:	e133      	b.n	8000708 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004a0:	2201      	movs	r2, #1
 80004a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	69fa      	ldr	r2, [r7, #28]
 80004b0:	4013      	ands	r3, r2
 80004b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004b4:	69ba      	ldr	r2, [r7, #24]
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	f040 8122 	bne.w	8000702 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	2b12      	cmp	r3, #18
 80004c4:	d034      	beq.n	8000530 <HAL_GPIO_Init+0xa4>
 80004c6:	2b12      	cmp	r3, #18
 80004c8:	d80d      	bhi.n	80004e6 <HAL_GPIO_Init+0x5a>
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d02b      	beq.n	8000526 <HAL_GPIO_Init+0x9a>
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d804      	bhi.n	80004dc <HAL_GPIO_Init+0x50>
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d031      	beq.n	800053a <HAL_GPIO_Init+0xae>
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d01c      	beq.n	8000514 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004da:	e048      	b.n	800056e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d043      	beq.n	8000568 <HAL_GPIO_Init+0xdc>
 80004e0:	2b11      	cmp	r3, #17
 80004e2:	d01b      	beq.n	800051c <HAL_GPIO_Init+0x90>
          break;
 80004e4:	e043      	b.n	800056e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e6:	4a8f      	ldr	r2, [pc, #572]	; (8000724 <HAL_GPIO_Init+0x298>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d026      	beq.n	800053a <HAL_GPIO_Init+0xae>
 80004ec:	4a8d      	ldr	r2, [pc, #564]	; (8000724 <HAL_GPIO_Init+0x298>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d806      	bhi.n	8000500 <HAL_GPIO_Init+0x74>
 80004f2:	4a8d      	ldr	r2, [pc, #564]	; (8000728 <HAL_GPIO_Init+0x29c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d020      	beq.n	800053a <HAL_GPIO_Init+0xae>
 80004f8:	4a8c      	ldr	r2, [pc, #560]	; (800072c <HAL_GPIO_Init+0x2a0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d01d      	beq.n	800053a <HAL_GPIO_Init+0xae>
          break;
 80004fe:	e036      	b.n	800056e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000500:	4a8b      	ldr	r2, [pc, #556]	; (8000730 <HAL_GPIO_Init+0x2a4>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d019      	beq.n	800053a <HAL_GPIO_Init+0xae>
 8000506:	4a8b      	ldr	r2, [pc, #556]	; (8000734 <HAL_GPIO_Init+0x2a8>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d016      	beq.n	800053a <HAL_GPIO_Init+0xae>
 800050c:	4a8a      	ldr	r2, [pc, #552]	; (8000738 <HAL_GPIO_Init+0x2ac>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d013      	beq.n	800053a <HAL_GPIO_Init+0xae>
          break;
 8000512:	e02c      	b.n	800056e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	623b      	str	r3, [r7, #32]
          break;
 800051a:	e028      	b.n	800056e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	3304      	adds	r3, #4
 8000522:	623b      	str	r3, [r7, #32]
          break;
 8000524:	e023      	b.n	800056e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	3308      	adds	r3, #8
 800052c:	623b      	str	r3, [r7, #32]
          break;
 800052e:	e01e      	b.n	800056e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	330c      	adds	r3, #12
 8000536:	623b      	str	r3, [r7, #32]
          break;
 8000538:	e019      	b.n	800056e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d102      	bne.n	8000548 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000542:	2304      	movs	r3, #4
 8000544:	623b      	str	r3, [r7, #32]
          break;
 8000546:	e012      	b.n	800056e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d105      	bne.n	800055c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000550:	2308      	movs	r3, #8
 8000552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	611a      	str	r2, [r3, #16]
          break;
 800055a:	e008      	b.n	800056e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800055c:	2308      	movs	r3, #8
 800055e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	69fa      	ldr	r2, [r7, #28]
 8000564:	615a      	str	r2, [r3, #20]
          break;
 8000566:	e002      	b.n	800056e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
          break;
 800056c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	2bff      	cmp	r3, #255	; 0xff
 8000572:	d801      	bhi.n	8000578 <HAL_GPIO_Init+0xec>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	e001      	b.n	800057c <HAL_GPIO_Init+0xf0>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3304      	adds	r3, #4
 800057c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d802      	bhi.n	800058a <HAL_GPIO_Init+0xfe>
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	e002      	b.n	8000590 <HAL_GPIO_Init+0x104>
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	3b08      	subs	r3, #8
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	210f      	movs	r1, #15
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	401a      	ands	r2, r3
 80005a2:	6a39      	ldr	r1, [r7, #32]
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	f000 80a2 	beq.w	8000702 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b5f      	ldr	r3, [pc, #380]	; (800073c <HAL_GPIO_Init+0x2b0>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a5e      	ldr	r2, [pc, #376]	; (800073c <HAL_GPIO_Init+0x2b0>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b5c      	ldr	r3, [pc, #368]	; (800073c <HAL_GPIO_Init+0x2b0>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005d6:	4a5a      	ldr	r2, [pc, #360]	; (8000740 <HAL_GPIO_Init+0x2b4>)
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	089b      	lsrs	r3, r3, #2
 80005dc:	3302      	adds	r3, #2
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	f003 0303 	and.w	r3, r3, #3
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	220f      	movs	r2, #15
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a51      	ldr	r2, [pc, #324]	; (8000744 <HAL_GPIO_Init+0x2b8>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d01f      	beq.n	8000642 <HAL_GPIO_Init+0x1b6>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a50      	ldr	r2, [pc, #320]	; (8000748 <HAL_GPIO_Init+0x2bc>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d019      	beq.n	800063e <HAL_GPIO_Init+0x1b2>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a4f      	ldr	r2, [pc, #316]	; (800074c <HAL_GPIO_Init+0x2c0>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d013      	beq.n	800063a <HAL_GPIO_Init+0x1ae>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a4e      	ldr	r2, [pc, #312]	; (8000750 <HAL_GPIO_Init+0x2c4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d00d      	beq.n	8000636 <HAL_GPIO_Init+0x1aa>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a4d      	ldr	r2, [pc, #308]	; (8000754 <HAL_GPIO_Init+0x2c8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d007      	beq.n	8000632 <HAL_GPIO_Init+0x1a6>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a4c      	ldr	r2, [pc, #304]	; (8000758 <HAL_GPIO_Init+0x2cc>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_GPIO_Init+0x1a2>
 800062a:	2305      	movs	r3, #5
 800062c:	e00a      	b.n	8000644 <HAL_GPIO_Init+0x1b8>
 800062e:	2306      	movs	r3, #6
 8000630:	e008      	b.n	8000644 <HAL_GPIO_Init+0x1b8>
 8000632:	2304      	movs	r3, #4
 8000634:	e006      	b.n	8000644 <HAL_GPIO_Init+0x1b8>
 8000636:	2303      	movs	r3, #3
 8000638:	e004      	b.n	8000644 <HAL_GPIO_Init+0x1b8>
 800063a:	2302      	movs	r3, #2
 800063c:	e002      	b.n	8000644 <HAL_GPIO_Init+0x1b8>
 800063e:	2301      	movs	r3, #1
 8000640:	e000      	b.n	8000644 <HAL_GPIO_Init+0x1b8>
 8000642:	2300      	movs	r3, #0
 8000644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000646:	f002 0203 	and.w	r2, r2, #3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4093      	lsls	r3, r2
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000654:	493a      	ldr	r1, [pc, #232]	; (8000740 <HAL_GPIO_Init+0x2b4>)
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	089b      	lsrs	r3, r3, #2
 800065a:	3302      	adds	r3, #2
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <HAL_GPIO_Init+0x2d0>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	493a      	ldr	r1, [pc, #232]	; (800075c <HAL_GPIO_Init+0x2d0>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	600b      	str	r3, [r1, #0]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <HAL_GPIO_Init+0x2d0>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4935      	ldr	r1, [pc, #212]	; (800075c <HAL_GPIO_Init+0x2d0>)
 8000686:	4013      	ands	r3, r2
 8000688:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d006      	beq.n	80006a4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <HAL_GPIO_Init+0x2d0>)
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	4930      	ldr	r1, [pc, #192]	; (800075c <HAL_GPIO_Init+0x2d0>)
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	604b      	str	r3, [r1, #4]
 80006a2:	e006      	b.n	80006b2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006a4:	4b2d      	ldr	r3, [pc, #180]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	43db      	mvns	r3, r3
 80006ac:	492b      	ldr	r1, [pc, #172]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006ae:	4013      	ands	r3, r2
 80006b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006be:	4b27      	ldr	r3, [pc, #156]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	4926      	ldr	r1, [pc, #152]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	608b      	str	r3, [r1, #8]
 80006ca:	e006      	b.n	80006da <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4921      	ldr	r1, [pc, #132]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	491c      	ldr	r1, [pc, #112]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	60cb      	str	r3, [r1, #12]
 80006f2:	e006      	b.n	8000702 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4917      	ldr	r1, [pc, #92]	; (800075c <HAL_GPIO_Init+0x2d0>)
 80006fe:	4013      	ands	r3, r2
 8000700:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	3301      	adds	r3, #1
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	f47f aec4 	bne.w	80004a0 <HAL_GPIO_Init+0x14>
  }
}
 8000718:	bf00      	nop
 800071a:	372c      	adds	r7, #44	; 0x2c
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	10210000 	.word	0x10210000
 8000728:	10110000 	.word	0x10110000
 800072c:	10120000 	.word	0x10120000
 8000730:	10310000 	.word	0x10310000
 8000734:	10320000 	.word	0x10320000
 8000738:	10220000 	.word	0x10220000
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40011000 	.word	0x40011000
 8000750:	40011400 	.word	0x40011400
 8000754:	40011800 	.word	0x40011800
 8000758:	40011c00 	.word	0x40011c00
 800075c:	40010400 	.word	0x40010400

08000760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
 800076c:	4613      	mov	r3, r2
 800076e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000776:	887a      	ldrh	r2, [r7, #2]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800077c:	e003      	b.n	8000786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	041a      	lsls	r2, r3, #16
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	611a      	str	r2, [r3, #16]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e26c      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 8087 	beq.w	80008be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007b0:	4b92      	ldr	r3, [pc, #584]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d00c      	beq.n	80007d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007bc:	4b8f      	ldr	r3, [pc, #572]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f003 030c 	and.w	r3, r3, #12
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d112      	bne.n	80007ee <HAL_RCC_OscConfig+0x5e>
 80007c8:	4b8c      	ldr	r3, [pc, #560]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007d4:	d10b      	bne.n	80007ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007d6:	4b89      	ldr	r3, [pc, #548]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d06c      	beq.n	80008bc <HAL_RCC_OscConfig+0x12c>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d168      	bne.n	80008bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e246      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f6:	d106      	bne.n	8000806 <HAL_RCC_OscConfig+0x76>
 80007f8:	4b80      	ldr	r3, [pc, #512]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a7f      	ldr	r2, [pc, #508]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80007fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	e02e      	b.n	8000864 <HAL_RCC_OscConfig+0xd4>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10c      	bne.n	8000828 <HAL_RCC_OscConfig+0x98>
 800080e:	4b7b      	ldr	r3, [pc, #492]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a7a      	ldr	r2, [pc, #488]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b78      	ldr	r3, [pc, #480]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a77      	ldr	r2, [pc, #476]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e01d      	b.n	8000864 <HAL_RCC_OscConfig+0xd4>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000830:	d10c      	bne.n	800084c <HAL_RCC_OscConfig+0xbc>
 8000832:	4b72      	ldr	r3, [pc, #456]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a71      	ldr	r2, [pc, #452]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b6f      	ldr	r3, [pc, #444]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a6e      	ldr	r2, [pc, #440]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e00b      	b.n	8000864 <HAL_RCC_OscConfig+0xd4>
 800084c:	4b6b      	ldr	r3, [pc, #428]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a6a      	ldr	r2, [pc, #424]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b68      	ldr	r3, [pc, #416]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a67      	ldr	r2, [pc, #412]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 800085e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d013      	beq.n	8000894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800086c:	f7ff fd02 	bl	8000274 <HAL_GetTick>
 8000870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000872:	e008      	b.n	8000886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000874:	f7ff fcfe 	bl	8000274 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	2b64      	cmp	r3, #100	; 0x64
 8000880:	d901      	bls.n	8000886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000882:	2303      	movs	r3, #3
 8000884:	e1fa      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000886:	4b5d      	ldr	r3, [pc, #372]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f0      	beq.n	8000874 <HAL_RCC_OscConfig+0xe4>
 8000892:	e014      	b.n	80008be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000894:	f7ff fcee 	bl	8000274 <HAL_GetTick>
 8000898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800089a:	e008      	b.n	80008ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800089c:	f7ff fcea 	bl	8000274 <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2b64      	cmp	r3, #100	; 0x64
 80008a8:	d901      	bls.n	80008ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e1e6      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ae:	4b53      	ldr	r3, [pc, #332]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f0      	bne.n	800089c <HAL_RCC_OscConfig+0x10c>
 80008ba:	e000      	b.n	80008be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d063      	beq.n	8000992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ca:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008d6:	4b49      	ldr	r3, [pc, #292]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 030c 	and.w	r3, r3, #12
 80008de:	2b08      	cmp	r3, #8
 80008e0:	d11c      	bne.n	800091c <HAL_RCC_OscConfig+0x18c>
 80008e2:	4b46      	ldr	r3, [pc, #280]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d116      	bne.n	800091c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ee:	4b43      	ldr	r3, [pc, #268]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <HAL_RCC_OscConfig+0x176>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d001      	beq.n	8000906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e1ba      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4939      	ldr	r1, [pc, #228]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800091a:	e03a      	b.n	8000992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d020      	beq.n	8000966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <HAL_RCC_OscConfig+0x270>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092a:	f7ff fca3 	bl	8000274 <HAL_GetTick>
 800092e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000930:	e008      	b.n	8000944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000932:	f7ff fc9f 	bl	8000274 <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d901      	bls.n	8000944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000940:	2303      	movs	r3, #3
 8000942:	e19b      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f0      	beq.n	8000932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	4927      	ldr	r1, [pc, #156]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000960:	4313      	orrs	r3, r2
 8000962:	600b      	str	r3, [r1, #0]
 8000964:	e015      	b.n	8000992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <HAL_RCC_OscConfig+0x270>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800096c:	f7ff fc82 	bl	8000274 <HAL_GetTick>
 8000970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000972:	e008      	b.n	8000986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000974:	f7ff fc7e 	bl	8000274 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	2b02      	cmp	r3, #2
 8000980:	d901      	bls.n	8000986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000982:	2303      	movs	r3, #3
 8000984:	e17a      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f0      	bne.n	8000974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d03a      	beq.n	8000a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d019      	beq.n	80009da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_RCC_OscConfig+0x274>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ac:	f7ff fc62 	bl	8000274 <HAL_GetTick>
 80009b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b2:	e008      	b.n	80009c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009b4:	f7ff fc5e 	bl	8000274 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d901      	bls.n	80009c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009c2:	2303      	movs	r3, #3
 80009c4:	e15a      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_RCC_OscConfig+0x26c>)
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f0      	beq.n	80009b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 faf6 	bl	8000fc4 <RCC_Delay>
 80009d8:	e01c      	b.n	8000a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_RCC_OscConfig+0x274>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009e0:	f7ff fc48 	bl	8000274 <HAL_GetTick>
 80009e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e6:	e00f      	b.n	8000a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009e8:	f7ff fc44 	bl	8000274 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d908      	bls.n	8000a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	e140      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	42420000 	.word	0x42420000
 8000a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a08:	4b9e      	ldr	r3, [pc, #632]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1e9      	bne.n	80009e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 80a6 	beq.w	8000b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a26:	4b97      	ldr	r3, [pc, #604]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10d      	bne.n	8000a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b94      	ldr	r3, [pc, #592]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a93      	ldr	r2, [pc, #588]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b91      	ldr	r3, [pc, #580]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a4e:	4b8e      	ldr	r3, [pc, #568]	; (8000c88 <HAL_RCC_OscConfig+0x4f8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d118      	bne.n	8000a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a5a:	4b8b      	ldr	r3, [pc, #556]	; (8000c88 <HAL_RCC_OscConfig+0x4f8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a8a      	ldr	r2, [pc, #552]	; (8000c88 <HAL_RCC_OscConfig+0x4f8>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a66:	f7ff fc05 	bl	8000274 <HAL_GetTick>
 8000a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a6c:	e008      	b.n	8000a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a6e:	f7ff fc01 	bl	8000274 <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b64      	cmp	r3, #100	; 0x64
 8000a7a:	d901      	bls.n	8000a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e0fd      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a80:	4b81      	ldr	r3, [pc, #516]	; (8000c88 <HAL_RCC_OscConfig+0x4f8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f0      	beq.n	8000a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d106      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x312>
 8000a94:	4b7b      	ldr	r3, [pc, #492]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	4a7a      	ldr	r2, [pc, #488]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6213      	str	r3, [r2, #32]
 8000aa0:	e02d      	b.n	8000afe <HAL_RCC_OscConfig+0x36e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10c      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x334>
 8000aaa:	4b76      	ldr	r3, [pc, #472]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a75      	ldr	r2, [pc, #468]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	4b73      	ldr	r3, [pc, #460]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4a72      	ldr	r2, [pc, #456]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	f023 0304 	bic.w	r3, r3, #4
 8000ac0:	6213      	str	r3, [r2, #32]
 8000ac2:	e01c      	b.n	8000afe <HAL_RCC_OscConfig+0x36e>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d10c      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x356>
 8000acc:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a6c      	ldr	r2, [pc, #432]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6213      	str	r3, [r2, #32]
 8000ad8:	4b6a      	ldr	r3, [pc, #424]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	4a69      	ldr	r2, [pc, #420]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6213      	str	r3, [r2, #32]
 8000ae4:	e00b      	b.n	8000afe <HAL_RCC_OscConfig+0x36e>
 8000ae6:	4b67      	ldr	r3, [pc, #412]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a66      	ldr	r2, [pc, #408]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	6213      	str	r3, [r2, #32]
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	4a63      	ldr	r2, [pc, #396]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000af8:	f023 0304 	bic.w	r3, r3, #4
 8000afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d015      	beq.n	8000b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fbb5 	bl	8000274 <HAL_GetTick>
 8000b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b0c:	e00a      	b.n	8000b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b0e:	f7ff fbb1 	bl	8000274 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d901      	bls.n	8000b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e0ab      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b24:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0ee      	beq.n	8000b0e <HAL_RCC_OscConfig+0x37e>
 8000b30:	e014      	b.n	8000b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b32:	f7ff fb9f 	bl	8000274 <HAL_GetTick>
 8000b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b38:	e00a      	b.n	8000b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b3a:	f7ff fb9b 	bl	8000274 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d901      	bls.n	8000b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e095      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b50:	4b4c      	ldr	r3, [pc, #304]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1ee      	bne.n	8000b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d105      	bne.n	8000b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b62:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a47      	ldr	r2, [pc, #284]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8081 	beq.w	8000c7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b78:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d061      	beq.n	8000c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d146      	bne.n	8000c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b8c:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <HAL_RCC_OscConfig+0x4fc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b92:	f7ff fb6f 	bl	8000274 <HAL_GetTick>
 8000b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b98:	e008      	b.n	8000bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b9a:	f7ff fb6b 	bl	8000274 <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e067      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f0      	bne.n	8000b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a1b      	ldr	r3, [r3, #32]
 8000bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc0:	d108      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	492d      	ldr	r1, [pc, #180]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a19      	ldr	r1, [r3, #32]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	430b      	orrs	r3, r1
 8000be6:	4927      	ldr	r1, [pc, #156]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_RCC_OscConfig+0x4fc>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fb3f 	bl	8000274 <HAL_GetTick>
 8000bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bfa:	f7ff fb3b 	bl	8000274 <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e037      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f0      	beq.n	8000bfa <HAL_RCC_OscConfig+0x46a>
 8000c18:	e02f      	b.n	8000c7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_RCC_OscConfig+0x4fc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fb28 	bl	8000274 <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fb24 	bl	8000274 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e020      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f0      	bne.n	8000c28 <HAL_RCC_OscConfig+0x498>
 8000c46:	e018      	b.n	8000c7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e013      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_RCC_OscConfig+0x4f4>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d106      	bne.n	8000c76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	42420060 	.word	0x42420060

08000c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e0d0      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ca4:	4b6a      	ldr	r3, [pc, #424]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d910      	bls.n	8000cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 0207 	bic.w	r2, r3, #7
 8000cba:	4965      	ldr	r1, [pc, #404]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc2:	4b63      	ldr	r3, [pc, #396]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d001      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0b8      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cec:	4b59      	ldr	r3, [pc, #356]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d04:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a52      	ldr	r2, [pc, #328]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d10:	4b50      	ldr	r3, [pc, #320]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	494d      	ldr	r1, [pc, #308]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d040      	beq.n	8000db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d107      	bne.n	8000d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d115      	bne.n	8000d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e07f      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d107      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d109      	bne.n	8000d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e073      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e06b      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f023 0203 	bic.w	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4936      	ldr	r1, [pc, #216]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d80:	f7ff fa78 	bl	8000274 <HAL_GetTick>
 8000d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d86:	e00a      	b.n	8000d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d88:	f7ff fa74 	bl	8000274 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e053      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 020c 	and.w	r2, r3, #12
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d1eb      	bne.n	8000d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d210      	bcs.n	8000de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 0207 	bic.w	r2, r3, #7
 8000dc6:	4922      	ldr	r1, [pc, #136]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_RCC_ClockConfig+0x1c0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d001      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e032      	b.n	8000e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d008      	beq.n	8000dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4916      	ldr	r1, [pc, #88]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e1e:	f000 f821 	bl	8000e64 <HAL_RCC_GetSysClockFreq>
 8000e22:	4601      	mov	r1, r0
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_ClockConfig+0x1c4>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_RCC_ClockConfig+0x1c8>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	fa21 f303 	lsr.w	r3, r1, r3
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_RCC_ClockConfig+0x1cc>)
 8000e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_RCC_ClockConfig+0x1d0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fc24 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40022000 	.word	0x40022000
 8000e54:	40021000 	.word	0x40021000
 8000e58:	080018d8 	.word	0x080018d8
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000

08000e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e64:	b490      	push	{r4, r7}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e6c:	1d3c      	adds	r4, r7, #4
 8000e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d002      	beq.n	8000ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d003      	beq.n	8000eaa <HAL_RCC_GetSysClockFreq+0x46>
 8000ea2:	e02d      	b.n	8000f00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea6:	623b      	str	r3, [r7, #32]
      break;
 8000ea8:	e02d      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000ebc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d013      	beq.n	8000ef0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	0c5b      	lsrs	r3, r3, #17
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000edc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ee2:	fb02 f203 	mul.w	r2, r2, r3
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
 8000eee:	e004      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	623b      	str	r3, [r7, #32]
      break;
 8000efe:	e002      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f02:	623b      	str	r3, [r7, #32]
      break;
 8000f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f06:	6a3b      	ldr	r3, [r7, #32]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3728      	adds	r7, #40	; 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc90      	pop	{r4, r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	080018c4 	.word	0x080018c4
 8000f18:	080018d4 	.word	0x080018d4
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	007a1200 	.word	0x007a1200
 8000f24:	003d0900 	.word	0x003d0900

08000f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f40:	f7ff fff2 	bl	8000f28 <HAL_RCC_GetHCLKFreq>
 8000f44:	4601      	mov	r1, r0
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	0adb      	lsrs	r3, r3, #11
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	080018e8 	.word	0x080018e8

08000f64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	220f      	movs	r2, #15
 8000f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_RCC_GetClockConfig+0x58>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_RCC_GetClockConfig+0x58>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_RCC_GetClockConfig+0x58>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_RCC_GetClockConfig+0x58>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0207 	and.w	r2, r3, #7
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <RCC_Delay+0x34>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <RCC_Delay+0x38>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	0a5b      	lsrs	r3, r3, #9
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fe0:	bf00      	nop
  }
  while (Delay --);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	60fa      	str	r2, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f9      	bne.n	8000fe0 <RCC_Delay+0x1c>
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	10624dd3 	.word	0x10624dd3

08001000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e01d      	b.n	800104e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f815 	bl	8001056 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3304      	adds	r3, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4610      	mov	r0, r2
 8001040:	f000 f962 	bl	8001308 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b06      	cmp	r3, #6
 8001090:	d007      	beq.n	80010a2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d122      	bne.n	800110a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d11b      	bne.n	800110a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f06f 0202 	mvn.w	r2, #2
 80010da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f8ed 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 80010f6:	e005      	b.n	8001104 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f8e0 	bl	80012be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f8ef 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b04      	cmp	r3, #4
 8001116:	d122      	bne.n	800115e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b04      	cmp	r3, #4
 8001124:	d11b      	bne.n	800115e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0204 	mvn.w	r2, #4
 800112e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f8c3 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 800114a:	e005      	b.n	8001158 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f8b6 	bl	80012be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f8c5 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b08      	cmp	r3, #8
 800116a:	d122      	bne.n	80011b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b08      	cmp	r3, #8
 8001178:	d11b      	bne.n	80011b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0208 	mvn.w	r2, #8
 8001182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f899 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 800119e:	e005      	b.n	80011ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f88c 	bl	80012be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f89b 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d122      	bne.n	8001206 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d11b      	bne.n	8001206 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f06f 0210 	mvn.w	r2, #16
 80011d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2208      	movs	r2, #8
 80011dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f86f 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 80011f2:	e005      	b.n	8001200 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f862 	bl	80012be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f871 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10e      	bne.n	8001232 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f06f 0201 	mvn.w	r2, #1
 800122a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9e3 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123c:	2b80      	cmp	r3, #128	; 0x80
 800123e:	d10e      	bne.n	800125e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	2b80      	cmp	r3, #128	; 0x80
 800124c:	d107      	bne.n	800125e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f8d8 	bl	800140e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001268:	2b40      	cmp	r3, #64	; 0x40
 800126a:	d10e      	bne.n	800128a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001276:	2b40      	cmp	r3, #64	; 0x40
 8001278:	d107      	bne.n	800128a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f835 	bl	80012f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b20      	cmp	r3, #32
 8001296:	d10e      	bne.n	80012b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d107      	bne.n	80012b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f06f 0220 	mvn.w	r2, #32
 80012ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f8a3 	bl	80013fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <TIM_Base_SetConfig+0xe0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <TIM_Base_SetConfig+0x40>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a32      	ldr	r2, [pc, #200]	; (80013ec <TIM_Base_SetConfig+0xe4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00f      	beq.n	8001348 <TIM_Base_SetConfig+0x40>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132e:	d00b      	beq.n	8001348 <TIM_Base_SetConfig+0x40>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <TIM_Base_SetConfig+0xe8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d007      	beq.n	8001348 <TIM_Base_SetConfig+0x40>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <TIM_Base_SetConfig+0xec>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d003      	beq.n	8001348 <TIM_Base_SetConfig+0x40>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <TIM_Base_SetConfig+0xf0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d108      	bne.n	800135a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <TIM_Base_SetConfig+0xe0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <TIM_Base_SetConfig+0x82>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <TIM_Base_SetConfig+0xe4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00f      	beq.n	800138a <TIM_Base_SetConfig+0x82>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001370:	d00b      	beq.n	800138a <TIM_Base_SetConfig+0x82>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <TIM_Base_SetConfig+0xe8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <TIM_Base_SetConfig+0x82>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <TIM_Base_SetConfig+0xec>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d003      	beq.n	800138a <TIM_Base_SetConfig+0x82>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <TIM_Base_SetConfig+0xf0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d108      	bne.n	800139c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <TIM_Base_SetConfig+0xe0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d003      	beq.n	80013d0 <TIM_Base_SetConfig+0xc8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <TIM_Base_SetConfig+0xe4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d103      	bne.n	80013d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	615a      	str	r2, [r3, #20]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	40013400 	.word	0x40013400
 80013f0:	40000400 	.word	0x40000400
 80013f4:	40000800 	.word	0x40000800
 80013f8:	40000c00 	.word	0x40000c00

080013fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <led_control>:
/**
  * @brief  control led light on or light off
  * @retval int
  */
int led_control(uint8_t num, uint8_t status)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
  if(num > 1 || num < 0)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d902      	bls.n	800143c <led_control+0x1c>
  {
    return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e01d      	b.n	8001478 <led_control+0x58>
  }

  if(status != 0 && status != 1)
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <led_control+0x2e>
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <led_control+0x2e>
  {
    return -1;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	e014      	b.n	8001478 <led_control+0x58>
  }

  if (num == 0)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <led_control+0x44>
  {
    HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, status);
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	461a      	mov	r2, r3
 8001458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <led_control+0x60>)
 800145e:	f7ff f97f 	bl	8000760 <HAL_GPIO_WritePin>
 8001462:	e008      	b.n	8001476 <led_control+0x56>
  }
  else if (num == 1)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d105      	bne.n	8001476 <led_control+0x56>
  {
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, status);
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	461a      	mov	r2, r3
 800146e:	2104      	movs	r1, #4
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <led_control+0x64>)
 8001472:	f7ff f975 	bl	8000760 <HAL_GPIO_WritePin>
  }

  return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010800 	.word	0x40010800
 8001484:	40011400 	.word	0x40011400

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f7fe feca 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 f819 	bl	80014c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f000 f85c 	bl	8001550 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    led_control(LED0, OFF);
 8001498:	2101      	movs	r1, #1
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ffc0 	bl	8001420 <led_control>
    led_control(LED1, OFF);
 80014a0:	2101      	movs	r1, #1
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff ffbc 	bl	8001420 <led_control>
    HAL_Delay(100);
 80014a8:	2064      	movs	r0, #100	; 0x64
 80014aa:	f7fe feed 	bl	8000288 <HAL_Delay>
    led_control(LED0, ON);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff ffb5 	bl	8001420 <led_control>
    led_control(LED1, ON);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ffb1 	bl	8001420 <led_control>
    HAL_Delay(100);
 80014be:	2064      	movs	r0, #100	; 0x64
 80014c0:	f7fe fee2 	bl	8000288 <HAL_Delay>
    led_control(LED0, OFF);
 80014c4:	e7e8      	b.n	8001498 <main+0x10>

080014c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b090      	sub	sp, #64	; 0x40
 80014ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	2228      	movs	r2, #40	; 0x28
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f9e1 	bl	800189c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001504:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f93e 	bl	8000790 <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800151a:	f000 f87f 	bl	800161c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2302      	movs	r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fba9 	bl	8000c90 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001544:	f000 f86a 	bl	800161c <Error_Handler>
  }
}
 8001548:	bf00      	nop
 800154a:	3740      	adds	r7, #64	; 0x40
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_GPIO_Init+0x9c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a20      	ldr	r2, [pc, #128]	; (80015ec <MX_GPIO_Init+0x9c>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_GPIO_Init+0x9c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_GPIO_Init+0x9c>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <MX_GPIO_Init+0x9c>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_GPIO_Init+0x9c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	4815      	ldr	r0, [pc, #84]	; (80015f0 <MX_GPIO_Init+0xa0>)
 800159c:	f7ff f8e0 	bl	8000760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2104      	movs	r1, #4
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <MX_GPIO_Init+0xa4>)
 80015a6:	f7ff f8db 	bl	8000760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015b0:	2311      	movs	r3, #17
 80015b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <MX_GPIO_Init+0xa0>)
 80015c4:	f7fe ff62 	bl	800048c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80015c8:	2304      	movs	r3, #4
 80015ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015cc:	2311      	movs	r3, #17
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_GPIO_Init+0xa4>)
 80015e0:	f7fe ff54 	bl	800048c <HAL_GPIO_Init>

}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40011400 	.word	0x40011400

080015f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800160a:	f7fe fe21 	bl	8000250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40012c00 	.word	0x40012c00

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_MspInit+0x5c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_MspInit+0x5c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x5c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x5c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_MspInit+0x60>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_MspInit+0x60>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000

0800168c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2019      	movs	r0, #25
 80016a2:	f7fe fec8 	bl	8000436 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80016a6:	2019      	movs	r0, #25
 80016a8:	f7fe fee1 	bl	800046e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_InitTick+0x9c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_InitTick+0x9c>)
 80016b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_InitTick+0x9c>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc48 	bl	8000f64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016d4:	f7ff fc32 	bl	8000f3c <HAL_RCC_GetPCLK2Freq>
 80016d8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	4a13      	ldr	r2, [pc, #76]	; (800172c <HAL_InitTick+0xa0>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	3b01      	subs	r3, #1
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_InitTick+0xa4>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_InitTick+0xa8>)
 80016ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_InitTick+0xa4>)
 80016f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_InitTick+0xa4>)
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_InitTick+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_InitTick+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <HAL_InitTick+0xa4>)
 800170a:	f7ff fc79 	bl	8001000 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <HAL_InitTick+0xa4>)
 8001716:	f7ff fca7 	bl	8001068 <HAL_TIM_Base_Start_IT>
 800171a:	4603      	mov	r3, r0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	431bde83 	.word	0x431bde83
 8001730:	2000002c 	.word	0x2000002c
 8001734:	40012c00 	.word	0x40012c00

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <HardFault_Handler+0x4>

0800174a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <BusFault_Handler+0x4>

08001756 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM1_UP_IRQHandler+0x10>)
 8001792:	f7ff fc8c 	bl	80010ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000002c 	.word	0x2000002c

080017a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <SystemInit+0x5c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <SystemInit+0x5c>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <SystemInit+0x5c>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4911      	ldr	r1, [pc, #68]	; (80017fc <SystemInit+0x5c>)
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <SystemInit+0x60>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <SystemInit+0x5c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <SystemInit+0x5c>)
 80017c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <SystemInit+0x5c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SystemInit+0x5c>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <SystemInit+0x5c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <SystemInit+0x5c>)
 80017de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80017e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SystemInit+0x5c>)
 80017e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SystemInit+0x64>)
 80017ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	f8ff0000 	.word	0xf8ff0000
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001808:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800180a:	e003      	b.n	8001814 <LoopCopyDataInit>

0800180c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800180e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001810:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001812:	3104      	adds	r1, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001818:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800181a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800181c:	d3f6      	bcc.n	800180c <CopyDataInit>
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001820:	e002      	b.n	8001828 <LoopFillZerobss>

08001822 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001824:	f842 3b04 	str.w	r3, [r2], #4

08001828 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800182a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800182c:	d3f9      	bcc.n	8001822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800182e:	f7ff ffb7 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f000 f80f 	bl	8001854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001836:	f7ff fe27 	bl	8001488 <main>
  bx lr
 800183a:	4770      	bx	lr
  ldr r3, =_sidata
 800183c:	080018f8 	.word	0x080018f8
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001844:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001848:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800184c:	2000006c 	.word	0x2000006c

08001850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_2_IRQHandler>
	...

08001854 <__libc_init_array>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	2500      	movs	r5, #0
 8001858:	4e0c      	ldr	r6, [pc, #48]	; (800188c <__libc_init_array+0x38>)
 800185a:	4c0d      	ldr	r4, [pc, #52]	; (8001890 <__libc_init_array+0x3c>)
 800185c:	1ba4      	subs	r4, r4, r6
 800185e:	10a4      	asrs	r4, r4, #2
 8001860:	42a5      	cmp	r5, r4
 8001862:	d109      	bne.n	8001878 <__libc_init_array+0x24>
 8001864:	f000 f822 	bl	80018ac <_init>
 8001868:	2500      	movs	r5, #0
 800186a:	4e0a      	ldr	r6, [pc, #40]	; (8001894 <__libc_init_array+0x40>)
 800186c:	4c0a      	ldr	r4, [pc, #40]	; (8001898 <__libc_init_array+0x44>)
 800186e:	1ba4      	subs	r4, r4, r6
 8001870:	10a4      	asrs	r4, r4, #2
 8001872:	42a5      	cmp	r5, r4
 8001874:	d105      	bne.n	8001882 <__libc_init_array+0x2e>
 8001876:	bd70      	pop	{r4, r5, r6, pc}
 8001878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800187c:	4798      	blx	r3
 800187e:	3501      	adds	r5, #1
 8001880:	e7ee      	b.n	8001860 <__libc_init_array+0xc>
 8001882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001886:	4798      	blx	r3
 8001888:	3501      	adds	r5, #1
 800188a:	e7f2      	b.n	8001872 <__libc_init_array+0x1e>
 800188c:	080018f0 	.word	0x080018f0
 8001890:	080018f0 	.word	0x080018f0
 8001894:	080018f0 	.word	0x080018f0
 8001898:	080018f4 	.word	0x080018f4

0800189c <memset>:
 800189c:	4603      	mov	r3, r0
 800189e:	4402      	add	r2, r0
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d100      	bne.n	80018a6 <memset+0xa>
 80018a4:	4770      	bx	lr
 80018a6:	f803 1b01 	strb.w	r1, [r3], #1
 80018aa:	e7f9      	b.n	80018a0 <memset+0x4>

080018ac <_init>:
 80018ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ae:	bf00      	nop
 80018b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b2:	bc08      	pop	{r3}
 80018b4:	469e      	mov	lr, r3
 80018b6:	4770      	bx	lr

080018b8 <_fini>:
 80018b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ba:	bf00      	nop
 80018bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018be:	bc08      	pop	{r3}
 80018c0:	469e      	mov	lr, r3
 80018c2:	4770      	bx	lr
